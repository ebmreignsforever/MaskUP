[1,["1cviBN9MhFw4I5ISpVSASV","16iox70t1Ms6pIdi2SBj1z"],["cameraTexure","_effectAsset"],["cc.RenderTexture",["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Material",["_name","_techIdx","_states","_defines","_props"],-1,12]],[[1,0,1,2,4],[2,0,1,2,3,4,5]],[[[[0,"Wave",[{"hash":1865644224,"name":"Wave|unlit-vs:vert|unlit-fs:frag","blocks":[{"name":"EffectToggle","stageFlags":16,"binding":0,"members":[{"name":"useEffect","type":13,"count":1},{"name":"frequency","type":13,"count":1},{"name":"time","type":13,"count":1},{"name":"invertWave","type":13,"count":1},{"name":"radial_frequency","type":13,"count":1},{"name":"shockwaveSize","type":13,"count":1},{"name":"shockwaveThickness","type":13,"count":1},{"name":"shockwaveSharpness","type":13,"count":1}],"defines":[]},{"name":"CustomVectors","stageFlags":16,"binding":1,"members":[{"name":"center","type":14,"count":1}],"defines":[]}],"samplerTextures":[{"name":"cameraTexure","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[],"samplerTextures":[{"name":"cc_spriteTexture","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"EffectToggle","stageFlags":16,"binding":0,"members":[{"name":"useEffect","type":13,"count":1},{"name":"frequency","type":13,"count":1},{"name":"time","type":13,"count":1},{"name":"invertWave","type":13,"count":1},{"name":"radial_frequency","type":13,"count":1},{"name":"shockwaveSize","type":13,"count":1},{"name":"shockwaveThickness","type":13,"count":1},{"name":"shockwaveSharpness","type":13,"count":1}],"defines":[]},{"name":"CustomVectors","stageFlags":16,"binding":1,"members":[{"name":"center","type":14,"count":1}],"defines":[]}],"samplerTextures":[{"name":"cameraTexure","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\n precision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n  in vec3 a_position;\n  in vec2 a_texCoord;\n  in vec4 a_color;\n  out vec2 v_uv;\n  out vec3 v_position;\n  out vec4 v_color;\n  out vec2 v_screenUV;\n vec4 vert () {\n    vec4 pos = vec4(a_position, 1);\n     pos = cc_matViewProj * pos;\n    v_uv = a_texCoord;\n    v_position = a_position;\n    v_color = a_color;\n    gl_Position = pos;\n    v_screenUV = 0.5 * (pos.xy / pos.w) + 0.5;\n    return pos;\n  }\nvoid main() { gl_Position = vert(); }","frag":"\n  precision highp float;\n  layout(std140) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n    mediump vec4 cc_probeInfo;\n    mediump vec4 cc_debug_view_mode;\n  };\n  layout(std140) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_surfaceTransform;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  vec4 CCFragOutput (vec4 color) {\n    return color;\n  }\n  #if CC_USE_FOG != 4\n  #endif\n  #if !CC_USE_ACCURATE_FOG\n  in mediump float v_fog_factor;\n  #endif\n  in vec2 v_uv;\n  in vec3 v_position;\n  in vec4 v_color;\n  in vec2 v_screenUV;\n  uniform sampler2D cc_spriteTexture;\n  layout(std140) uniform EffectToggle {\n    float useEffect;\n    float frequency;\n    float time;\n    float invertWave;\n    float radial_frequency;\n    float shockwaveSize;\n    float shockwaveThickness;\n    float shockwaveSharpness;\n  };\n  layout(std140) uniform CustomVectors\n  {\n    vec2 center ;\n  };\n  uniform sampler2D cameraTexure;\n  vec4 frag () {\n    vec4 col = vec4(0,0,0,1);\n    vec2 uv = vec2(0,0);\n    float uv_len  = 0.0;\n    vec2 uv_centered = vec2(0,0);\n    vec2 shockwave = vec2(0,0);\n    #if ONE_MINUS_FLIPY\n     uv = vec2( v_uv.x,1.0-v_uv.y);\n    #else\n     uv = v_screenUV.xy;\n    #endif\n     #if WAVE_X\n     uv.x += sin(uv.y * 20.0 + cc_time.x * 5.0) * frequency;\n     #endif\n     #if WAVE_Y\n     uv.y += sin(uv.x * 20.0 + cc_time.x * 5.0) * frequency;\n     #endif\n#if radialWave\n     uv_centered = uv * 2.0 - 1.0;\n    float radius = length(uv_centered);\n    vec2 dir = normalize(uv_centered);\n    float wave = sin(radius * 20.0 - cc_time.x * 5.0 *invertWave) * radial_frequency;\n    float fade = smoothstep(0.8,0.3, 1.0);\n    vec2 offset = dir * wave  ;\n    uv_centered += offset;\n    uv = uv_centered * 0.5 + 0.5;\n#endif\n#if SHOCK_WAVE\n   uv_centered = uv;\n   vec2 dirUV = normalize(uv_centered);\n   float innerCircle = 1.0- smoothstep(shockwaveSize - shockwaveSharpness,shockwaveSize, length(uv_centered - center));\n   float outerCircle = smoothstep(shockwaveSize - shockwaveThickness - shockwaveThickness,shockwaveSize - shockwaveThickness,length(uv_centered - center));\n   vec2 displacement = normalize(uv_centered-center);\n    shockwave =  displacement * innerCircle * outerCircle *dirUV;\n    uv += shockwave;\n#endif\n   vec4 mainTexture = texture(cc_spriteTexture, uv);\n  #if CAMERA_TEXURE\n    mainTexture= texture(cameraTexure,uv) ;\n  #endif\n    if(useEffect>0.0)\n    {\n    vec4 applyWhiteColor = mainTexture ;\n    vec4 output1 = v_color * applyWhiteColor ;\n    col =  output1;\n    }\n    else\n    {\n       col =  v_color *  mainTexture;\n    }\n    vec4 temp = vec4(shockwave.x,shockwave.x,shockwave.x,1) ;\n    #if GRAY_SCALE\n     return CCFragOutput(vec4(col.x,col.x,col.x ,1.0));\n    #else\n     return CCFragOutput(col);\n    #endif\n  }\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\n precision highp float;\nuniform highp mat4 cc_matViewProj;\n  attribute vec3 a_position;\n  attribute vec2 a_texCoord;\n  attribute vec4 a_color;\n  varying vec2 v_uv;\n  varying vec3 v_position;\n  varying vec4 v_color;\n  varying vec2 v_screenUV;\n vec4 vert () {\n    vec4 pos = vec4(a_position, 1);\n     pos = cc_matViewProj * pos;\n    v_uv = a_texCoord;\n    v_position = a_position;\n    v_color = a_color;\n    gl_Position = pos;\n    v_screenUV = 0.5 * (pos.xy / pos.w) + 0.5;\n    return pos;\n  }\nvoid main() { gl_Position = vert(); }","frag":"\n  precision highp float;\n  uniform highp vec4 cc_time;\n  vec4 CCFragOutput (vec4 color) {\n    return color;\n  }\n  #if CC_USE_FOG != 4\n  #endif\n  #if !CC_USE_ACCURATE_FOG\n  varying mediump float v_fog_factor;\n  #endif\n  varying vec2 v_uv;\n  varying vec3 v_position;\n  varying vec4 v_color;\n  varying vec2 v_screenUV;\n  uniform sampler2D cc_spriteTexture;\n        uniform float useEffect;\n      uniform float frequency;\n      uniform float invertWave;\n      uniform float radial_frequency;\n      uniform float shockwaveSize;\n      uniform float shockwaveThickness;\n      uniform float shockwaveSharpness;\n          uniform vec2 center;\n  uniform sampler2D cameraTexure;\n  vec4 frag () {\n    vec4 col = vec4(0,0,0,1);\n    vec2 uv = vec2(0,0);\n    float uv_len  = 0.0;\n    vec2 uv_centered = vec2(0,0);\n    vec2 shockwave = vec2(0,0);\n    #if ONE_MINUS_FLIPY\n     uv = vec2( v_uv.x,1.0-v_uv.y);\n    #else\n     uv = v_screenUV.xy;\n    #endif\n     #if WAVE_X\n     uv.x += sin(uv.y * 20.0 + cc_time.x * 5.0) * frequency;\n     #endif\n     #if WAVE_Y\n     uv.y += sin(uv.x * 20.0 + cc_time.x * 5.0) * frequency;\n     #endif\n#if radialWave\n     uv_centered = uv * 2.0 - 1.0;\n    float radius = length(uv_centered);\n    vec2 dir = normalize(uv_centered);\n    float wave = sin(radius * 20.0 - cc_time.x * 5.0 *invertWave) * radial_frequency;\n    float fade = smoothstep(0.8,0.3, 1.0);\n    vec2 offset = dir * wave  ;\n    uv_centered += offset;\n    uv = uv_centered * 0.5 + 0.5;\n#endif\n#if SHOCK_WAVE\n   uv_centered = uv;\n   vec2 dirUV = normalize(uv_centered);\n   float innerCircle = 1.0- smoothstep(shockwaveSize - shockwaveSharpness,shockwaveSize, length(uv_centered - center));\n   float outerCircle = smoothstep(shockwaveSize - shockwaveThickness - shockwaveThickness,shockwaveSize - shockwaveThickness,length(uv_centered - center));\n   vec2 displacement = normalize(uv_centered-center);\n    shockwave =  displacement * innerCircle * outerCircle *dirUV;\n    uv += shockwave;\n#endif\n   vec4 mainTexture = texture2D(cc_spriteTexture, uv);\n  #if CAMERA_TEXURE\n    mainTexture= texture2D(cameraTexure,uv) ;\n  #endif\n    if(useEffect>0.0)\n    {\n    vec4 applyWhiteColor = mainTexture ;\n    vec4 output1 = v_color * applyWhiteColor ;\n    col =  output1;\n    }\n    else\n    {\n       col =  v_color *  mainTexture;\n    }\n    vec4 temp = vec4(shockwave.x,shockwave.x,shockwave.x,1) ;\n    #if GRAY_SCALE\n     return CCFragOutput(vec4(col.x,col.x,col.x ,1.0));\n    #else\n     return CCFragOutput(col);\n    #endif\n  }\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[],"samplerTextures":[{"name":"cc_spriteTexture","defines":[]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":42,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":51}},"defines":[{"name":"CC_USE_FOG","type":"number","range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean"},{"name":"ONE_MINUS_FLIPY","type":"boolean"},{"name":"WAVE_X","type":"boolean"},{"name":"WAVE_Y","type":"boolean"},{"name":"radialWave","type":"boolean"},{"name":"SHOCK_WAVE","type":"boolean"},{"name":"CAMERA_TEXURE","type":"boolean"},{"name":"GRAY_SCALE","type":"boolean"}]}],[{"name":"opaque","passes":[{"program":"Wave|unlit-vs:vert|unlit-fs:frag","properties":{"time":{"type":13,"value":[0]},"useEffect":{"type":13,"value":[0]},"frequency":{"type":13,"value":[0.5]},"radial_frequency":{"type":13,"value":[0.03]},"invertWave":{"type":13,"value":[1]},"cameraTexure":{"value":"white","type":28},"shockwaveSize":{"type":13,"value":[0.1]},"shockwaveThickness":{"type":13,"value":[0.1]},"shockwaveSharpness":{"type":13,"value":[0.1]},"center":{"type":14,"value":[0,0]}}}]},{"name":"transparent","passes":[{"program":"Wave|unlit-vs:vert|unlit-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}],"rasterizerState":{"cullMode":0}},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"time":{"type":13,"value":[0]},"useEffect":{"type":13,"value":[0]},"frequency":{"type":13,"value":[0.5]},"radial_frequency":{"type":13,"value":[0.03]},"invertWave":{"type":13,"value":[1]},"cameraTexure":{"value":"white","type":28},"shockwaveSize":{"type":13,"value":[0.1]},"shockwaveThickness":{"type":13,"value":[0.1]},"shockwaveSharpness":{"type":13,"value":[0.1]},"center":{"type":14,"value":[0,0]}}}]}]]],0,0,[],[],[]],[[[1,"ShockWave",1,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"SHOCK_WAVE":true,"CAMERA_TEXURE":true}],[[[{"time":2.7,"useEffect":1,"shockwaveSize":0.3,"shockwaveSharpness":0.2},"cameraTexure",6,0]],11]]],0,0,[0,0],[0,1],[0,1]],[[{"base":"1,1,0,0,0,9","w":1080,"h":1920,"n":"Camera_texture"}],[0],0,[],[],[]]]]
