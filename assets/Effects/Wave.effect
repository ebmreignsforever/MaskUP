// Effect Syntax Guide: https://docs.cocos.com/creator/manual/zh/shader/index.html

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs:vert # builtin header
      frag: unlit-fs:frag
      properties: &props
       time: { value: 0.0 }
       useEffect: { value: 0, editor: { type: number, min: 0, max: 1, step: 1 } }
       frequency: {value: 0.5}
       radial_frequency: {value: 0.03}
       invertWave: { value: 1.0, editor: { type: number, min: -1.0, max: 1.0, step: 1 } }
       cameraTexure: {value : white}
       shockwaveSize: {value: 0.1}
       shockwaveThickness: {value: 0.1}
       shockwaveSharpness: {value: 0.1}
       center: { value: [0.0, 0.0] ,editor: { type: vec2}}
  - name: transparent
    passes:
    - vert: unlit-vs:vert # builtin header
      frag: unlit-fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
        rasterizerState:
          cullMode: none
      properties: *props
      depthStencilState:
        depthTest: false
        depthWrite: false
}%

CCProgram unlit-vs %{
 precision highp float; 
#include <builtin/uniforms/cc-global>
//#include <builtin/uniforms/cc-local>
//#include <cc-global>


  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec2 v_uv;
  out vec3 v_position;
  out vec4 v_color;
  out vec2 v_screenUV;



 vec4 vert () {
    vec4 pos = vec4(a_position, 1);
     pos = cc_matViewProj * pos;

    v_uv = a_texCoord;
    v_position = a_position;

    v_color = a_color;
    gl_Position = pos;
    v_screenUV = 0.5 * (pos.xy / pos.w) + 0.5; // screenUV in [0,1]
    return pos;
  }
 
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <legacy/output>
  #include <legacy/fog-fs>

  in vec2 v_uv;
  in vec3 v_position;
  in vec4 v_color;
  in vec2 v_screenUV;        

  #pragma builtin(local)
  layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;


  uniform EffectToggle {
    float useEffect;
    float frequency;
    float time;
    float invertWave;
    float radial_frequency;
    float shockwaveSize;
    float shockwaveThickness;
    float shockwaveSharpness;
  };  

  uniform CustomVectors
  {
    vec2 center ;
  };
  uniform sampler2D cameraTexure;
  vec4 frag () {
    vec4 col = vec4(0,0,0,1);
    vec2 uv = vec2(0,0);
    float uv_len  = 0.0;
    vec2 uv_centered = vec2(0,0);
    vec2 shockwave = vec2(0,0);
    
   //vec2 screenUV = cc_screen.xy / cc_screen.zw;


    #if ONE_MINUS_FLIPY
     uv = vec2( v_uv.x,1.0-v_uv.y);
    #else
     uv = v_screenUV.xy;//v_uv.xy;
    #endif
    // Apply sine wave to UV.y to distort horizontally
     
     #if WAVE_X
     uv.x += sin(uv.y * 20.0 + cc_time.x * 5.0) * frequency;
     #endif
     #if WAVE_Y
     uv.y += sin(uv.x * 20.0 + cc_time.x * 5.0) * frequency;
     #endif

#if radialWave
    // Center the UVs around (0, 0)
     uv_centered = uv * 2.0 - 1.0;

    // Get the radial distance from center
    float radius = length(uv_centered);

    // Direction from center (normalized vector)
    vec2 dir = normalize(uv_centered);

    // Create a sine wave distortion based on radius and time
    float wave = sin(radius * 20.0 - cc_time.x * 5.0 *invertWave) * radial_frequency;
    //Fade with distance
    float fade = smoothstep(0.8,0.3, 1.0);
    // Push pixels outward or inward along the radial direction
    vec2 offset = dir * wave  ;

    // Add distortion to the UV
    uv_centered += offset;

    // Convert back to 0â€“1 UV space
    uv = uv_centered * 0.5 + 0.5;
    //v_screenUV = uv * v_screenUV;
   // uv = v_screenUV ;
#endif

#if SHOCK_WAVE  
   uv_centered = uv; //uv * 2.0 - 1.0;
   vec2 dirUV = normalize(uv_centered);
   float innerCircle = 1.0- smoothstep(shockwaveSize - shockwaveSharpness,shockwaveSize, length(uv_centered - center));
   float outerCircle = smoothstep(shockwaveSize - shockwaveThickness - shockwaveThickness,shockwaveSize - shockwaveThickness,length(uv_centered - center));
   vec2 displacement = normalize(uv_centered-center);
    shockwave =  displacement * innerCircle * outerCircle *dirUV;
    uv += shockwave;
    //uv = uv * 0.5 + 0.5;
#endif

   vec4 mainTexture = texture(cc_spriteTexture, uv);

  #if CAMERA_TEXURE 
    mainTexture= texture(cameraTexure,uv) ;
  #endif

    if(useEffect>0.0)
    {
    // Apply white color logic
    vec4 applyWhiteColor = mainTexture ;  
    vec4 output1 = v_color * applyWhiteColor ;  
    col =  output1;
    }
    else
    {
       col =  v_color *  mainTexture;
    } 
    vec4 temp = vec4(shockwave.x,shockwave.x,shockwave.x,1) ;

   
    #if GRAY_SCALE
     return CCFragOutput(vec4(col.x,col.x,col.x ,1.0));
    #else
     return CCFragOutput(col);
    #endif
   
  }
}%
